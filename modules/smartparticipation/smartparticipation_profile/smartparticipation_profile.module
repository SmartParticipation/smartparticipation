<?php

use SmartParticipation\ProfileService;

require_once "includes/Profile.inc";
require_once "includes/ProfileField.inc";
require_once "includes/ProfileFieldDependency.inc";
require_once "includes/ProfileFieldGroup.inc";
require_once "includes/ProfileService.inc";
require_once "includes/ProfileHelper.inc";

/**
 * Implements hook_init().
 */
function smartparticipation_profile_init() {
  drupal_add_js(
    drupal_get_path('module', 'smartparticipation_profile') . '/smartparticipation_profile.js',
    array(
      'type' => 'file',
      'group' => JS_THEME,
    )
  );
}

/**
 * Implements hook_enable().
 */
function smartparticipation_profile_enable() {
  smartparticipation_profile_create_profile_menu_links();
}

function smartparticipation_profile_create_profile_menu_links()
{
  $user_menus = array(
    'sp-user-menu-logged-in',
    'sp-user-menu-mobile'
  );

  foreach ($user_menus as $menu_name) {

    $menu_link_identifier = $menu_name . 'menutoken/58a4b3c11486f';

    $menu_link = array(
      'menu_name' => $menu_name,
      'link_path' => 'menutoken/58a4b3c11486f',
      'router_path' => 'menutoken/%',
      'link_title' => 'Profile',
      'options' => array(
        'menu_token_link_path' => 'user/[current-user:uid]/profile',
        'menu_token_data' => array(),
        'menu_token_options' => array(
          'clear' => 0,
        ),
        'attributes' => array(
          'title' => '',
        ),
        'alter' => TRUE,
        'identifier' => $menu_link_identifier,
      ),
      'module' => 'menu',
      'hidden' => 1,
      'external' => 0,
      'has_children' => 0,
      'expanded' => 0,
      'weight' => 23,
    );

    if ($menu_name == 'sp-user-menu-logged-in') {

      $menu_link['parent_path'] = 'user';

      $plid = smartparticipation_profile_get_user_menu_parent_link_mlid();

      if ($plid) {
        $menu_link['plid'] = $plid;
      }

    }

    menu_link_save($menu_link);

  }

  menu_rebuild();

}

function smartparticipation_profile_get_user_menu_parent_link_mlid()
{
  return smartparticipation_profile_get_menu_link_mlid_by_title(
    'sp-user-menu-logged-in',
    '[current-user:name]'
  );
}

function smartparticipation_profile_get_menu_link_mlid_by_title($menu_name, $link_title)
{
  $mlid = db_select('menu_links' , 'ml')
    ->condition('ml.menu_name', $menu_name)
    ->condition('ml.link_title', $link_title)
    ->fields('ml', array('mlid'))
    ->execute()
    ->fetchCol();

  if (!empty($mlid)) {
    return array_pop($mlid);
  }

  return FALSE;
}

function smartparticipation_profile_set_menu_link_hidden($mlid, $hidden)
{
  return db_update('menu_links')
    ->fields(array('hidden' => $hidden))
    ->condition('mlid', $mlid)
    ->execute();
}

/**
 * Implements hook_page_alter().
 */
function smartparticipation_profile_page_alter(&$page) {

  $profile_reminder = !empty($_SESSION['smartparticipation_profile_reminder']);

  if ($profile_reminder) {
    // Only show the profile reminder once after login
    unset($_SESSION['smartparticipation_profile_reminder']);
    $page = smartparticipation_profile_add_profile_reminder_dialog($page);
  }

}

function smartparticipation_profile_add_profile_reminder_dialog($page)
{
  $markup =
    theme('dialog', array(
      'dlgId' => 'dlgProfileReminder',
      'title' => t('Share some info about yourself!'),
      'content' => theme('smartparticipation_user_profile_reminder'),
    ));

  $page['page_bottom']['smartparticipation_user_profile_reminder'] = array(
    '#markup' => $markup,
  );

  return $page;
}

/**
 * Implements hook_preprocess_HOOK().
 */
function smartparticipation_profile_preprocess_page(&$variables) {

  if (smartparticipation_core_is_my_public_profile()) {

    global $user;

    $variables['title_prefix'] = array(
      '#markup' => l(
        t('Edit my profile'),
        'user/'.$user->uid.'/profile/edit',
        array('attributes' => array('class' => 'button edit-my-profile'))
      )
    );

  }

}

/**
 * Implements hook_theme().
 */
function smartparticipation_profile_theme($existing, $type, $theme, $path) {
  return array(

    'smartparticipation_user_profile' => array(
      'template' => 'user_profile',
      'render element' => 'profile_data',
    ),

    'smartparticipation_user_profile_edit' => array(
      'template' => 'user_profile_edit',
      'render element' => 'profile_data',
    ),

    'smartparticipation_user_profile_reminder' => array(
      'template' => 'user_profile_reminder',
      'render element' => 'profile_data',
    ),

  );
}


/**
 * Implements hook_menu().
 */
function smartparticipation_profile_menu() {
  $items['user/%user/profile'] = array(
    'title' => '',
    'title callback' => '_smartparticipation_profile_user_profile_title',
    'title arguments' => array(1),
    'page callback' => 'smartparticipation_profile_user_profile_page',
    'page arguments' => array(1),
    'access callback' => 'smartparticipation_core_access_check_user',
    'access arguments' => array(1),
  );

  $items['user/%user/profile/edit'] = array(
    'title' => 'Edit profile',
    'page callback' => 'smartparticipation_profile_user_profile_edit_page',
    'page arguments' => array(1),
    'access callback' => 'smartparticipation_core_access_check_user',
    'access arguments' => array(1),
  );

  return $items;
}

function smartparticipation_profile_user_profile_edit_page($account)
{
  $form = drupal_get_form('smartparticipation_profile_profile_form');

  return array(
    '#theme' => 'smartparticipation_user_profile_edit',
    'form' => $form,
  );
}

function smartparticipation_profile_user_profile_page($account)
{
  if (!ProfileService::userProfilesAreActive()) {
    // TODO instead of relying on this redirect, can we replace the profile links with the stats link?
    drupal_goto(drupal_get_path_alias('user/' . $account->uid . '/stats'));
  }
  $profile_service = new SmartParticipation\ProfileService;
  $profile = $profile_service->find($account->uid);

  $profile_empty = $profile_service->isProfileEmpty($profile);
  $user_viewing_own_profile = smartparticipation_core_user_viewing_own_profile($account);

  // Redirect user to profile form if viewing their own empty profile.
  /*if ($user_viewing_own_profile && $profile_empty) {
    drupal_goto('user/' . $account->uid . '/profile/edit');
  }*/

  $no_content_message = t('@name has not provided any profile information.', array('@name' => $account->name));

  if ($user_viewing_own_profile) {
    $no_content_message = t(
      'You haven\'t provided any profile information - !edit_your_profile to share your information.', array(
        '!edit_your_profile' => l(
          t('edit your profile'),
          'user/'.$account->uid.'/profile/edit'
        )
      )
    );
  }

  $profile_helper = new \SmartParticipation\ProfileHelper($profile);

  return array(
    '#theme' => 'smartparticipation_user_profile',
    '#helper' => $profile_helper,
    '#profile' => $profile->getProfile2Profile(),
    'profile_empty' => $profile_empty,
    'no_content_message' => $no_content_message,
  );
}

/**
 * Implements hook_smartparticipation_admin_settings_form_alter().
 */
function smartparticipation_profile_smartparticipation_admin_settings_form_alter(&$form) {

  $form['profiles'] = array(
    '#type' => 'fieldset',
    '#title' => t('Profile Settings'),
    '#collapsible' => TRUE,
    '#collapsed' => TRUE,
    '#weight' => 5,
  );

  $form['profiles']['smartparticipation_profile_status'] = array(
    '#type' => 'select',
    '#title' => t('Profile status'),
    '#options' => array(
      0 => 'Disabled',
      1 => 'Enabled',
    ),
    '#default_value' => variable_get('smartparticipation_profile_status'),
    '#description' => t('Specify if user profiles are enabled.'),
    '#weight' => 10,
  );

  if (function_exists('profile2_get_types')) {
    $profile_types = profile2_get_types();
    if (!empty($profile_types)) {
      $profile_types = array_keys($profile_types);
      $profile_types = array_combine($profile_types, $profile_types);
      $form['profiles']['smartparticipation_active_profile'] = array(
        '#title' => t('Profile type'),
        '#type' => 'select',
        '#description' => 'The profile type that is currently in use.  This is the machine name of the Profile2 type.',
        '#options' => $profile_types,
        '#default_value' => variable_get('smartparticipation_active_profile'),
        '#weight' => 12,
        '#states' => array(
          'visible' => array(
            ':input[name="smartparticipation_profile_status"]' => array('value' => 1),
          ),
        ),
      );
    }
  }

  $form['profiles']['smartparticipation_profile_reminder'] = array(
    '#type' => 'checkbox',
    '#title' => t('Show profile reminder'),
    '#description' => t('Show profile reminder pop-up if user has not filled out any part of their profile.'),
    '#required' => FALSE,
    '#default_value' => variable_get('smartparticipation_profile_reminder'),
    '#weight' => 15,
    '#states' => array(
      'visible' => array(
        ':input[name="smartparticipation_profile_status"]' => array('value' => 1),
      ),
    ),
  );

  $form['profiles']['smartparticipation_profile_reminder_text'] = array(
    '#type' => 'textarea',
    '#title' => t('Profile reminder text'),
    '#description' => t('Text to show in the reminder pop-up.  Include the token: !profile_form_link'),
    '#required' => FALSE,
    '#default_value' => variable_get(
      'smartparticipation_profile_reminder_text',
      'You haven\'t filled out any of your profile. You can do so on your !profile_form_link.'
    ),
    '#weight' => 20,
    '#rows' => 3,
    '#states' => array(
      'visible' => array(
        ':input[name="smartparticipation_profile_status"]' => array('value' => 1),
        ':input[name="smartparticipation_profile_reminder"]' => array('checked' => TRUE),
      ),
    ),
  );

  $form['profiles']['smartparticipation_profile_form_link_text'] = array(
    '#type' => 'textfield',
    '#title' => t('Profile form link text'),
    '#description' => t('The text to use for the profile form link token: !profile_form_link'),
    '#required' => FALSE,
    '#default_value' => variable_get(
      'smartparticipation_profile_form_link_text',
      'profile form'
    ),
    '#size' => 45,
    '#weight' => 25,
    '#states' => array(
      'visible' => array(
        ':input[name="smartparticipation_profile_status"]' => array('value' => 1),
        ':input[name="smartparticipation_profile_reminder"]' => array('checked' => TRUE),
      ),
    ),
  );

  $form['#submit'][] = 'smartparticipation_profile_admin_settings_submit';

}

function smartparticipation_profile_admin_settings_submit($form, &$form_state)
{
  $profiles_enabled = $form_state['values']['smartparticipation_profile_status'];
  if ($profiles_enabled) {
    smartparticipation_profile_apply_profiles_enabled_user_menu();
  } else {
    smartparticipation_profile_apply_profiles_disabled_user_menu();
  }
}

function smartparticipation_profile_apply_profiles_enabled_user_menu()
{
  // Set path of parent user name link to user profile page
  smartparticipation_profile_set_user_menu_parent_link_path(
    'user/[current-user:uid]/profile'
  );
  // Enable Profile links
  smartparticipation_profile_set_user_menu_profile_links_status(1);
  // Disable Stats links
  smartparticipation_profile_set_user_menu_stats_links_status(0);
}

function smartparticipation_profile_apply_profiles_disabled_user_menu()
{
  // Set path of parent user name link to user stats page
  smartparticipation_profile_set_user_menu_parent_link_path(
    'user/[current-user:uid]/stats'
  );
  // Disable Profile links
  smartparticipation_profile_set_user_menu_profile_links_status(0);
  // Enable Stats links
  smartparticipation_profile_set_user_menu_stats_links_status(1);
}

function smartparticipation_profile_set_user_menu_parent_link_path($path)
{
  // Get user menu parent link mlid
  $parent_mlid = smartparticipation_profile_get_user_menu_parent_link_mlid();
  if (!empty($parent_mlid)) {
    $menu_link = menu_link_load($parent_mlid);
    // Prepare the menu link for re-saving
    $menu_link['link_path'] = 'user';
    $menu_link['router_path'] = 'user';
    unset($menu_link['localized_options']);
    unset($menu_link['href']);
    // Set the provided path
    $menu_link['options']['menu_token_link_path'] = $path;
    menu_link_save($menu_link);
    menu_rebuild();
  }
}

function smartparticipation_profile_set_user_menu_profile_links_status($status)
{
  $profile_link_mlids = array();

  if ($profile_link_mlid = smartparticipation_profile_get_menu_link_mlid_by_title(
    'sp-user-menu-logged-in',
    'Profile'
  )) {
    array_push($profile_link_mlids, $profile_link_mlid);
  }

  if ($profile_link_mlid = smartparticipation_profile_get_menu_link_mlid_by_title(
    'sp-user-menu-mobile',
    'Profile'
  )) {
    array_push($profile_link_mlids, $profile_link_mlid);
  }

  $hidden = $status ? 0 : 1;

  foreach($profile_link_mlids as $profile_link_mlid) {
    smartparticipation_profile_set_menu_link_hidden($profile_link_mlid, $hidden);
  }

}

function smartparticipation_profile_set_user_menu_stats_links_status($status)
{
  $stats_link_mlids = array();

  if ($stats_link_mlid = smartparticipation_profile_get_menu_link_mlid_by_title(
    'sp-user-menu-logged-in',
    'Stats'
  )) {
    array_push($stats_link_mlids, $stats_link_mlid);
  }

  if ($stats_link_mlid = smartparticipation_profile_get_menu_link_mlid_by_title(
    'sp-user-menu-mobile',
    'Stats'
  )) {
    array_push($stats_link_mlids, $stats_link_mlid);
  }

  $hidden = $status ? 0 : 1;

  foreach($stats_link_mlids as $stats_link_mlid) {
    smartparticipation_profile_set_menu_link_hidden($stats_link_mlid, $hidden);
  }
}

function smartparticipation_profile_profile_form($form, &$form_state)
{
  global $user;
  if (! isset($form_state['profiles'])) {
    $profile_type = variable_get('smartparticipation_active_profile','main');
    $profile = profile2_load_by_user($user, $profile_type);
    if (! $profile) {
      $profile = profile_create(array(
        'type' => $profile_type,
        'uid' => $user->uid
      ));
    }
    $form_state['profiles'][$profile->type] = $profile;
  }

  profile2_attach_form($form, $form_state);

  // Picture/avatar.
  $form['picture'] = array(
    '#type' => 'fieldset',
    '#title' => t('Share a photo of yourself or some other image that will appear next to your username in your Profile and your comments.'),
    '#weight' => 1,
    '#access' => (variable_get('user_pictures', 0)),
  );
  $form['picture']['picture'] = array(
    '#type' => 'value',
    '#value' => isset($user->picture) ? $user->picture : NULL,
  );
  $form['picture']['picture_current'] = array(
    '#markup' => theme('user_picture', array('account' => $user)),
  );
  $form['picture']['picture_delete'] = array(
    '#type' => 'checkbox',
    '#title' => t('Delete picture'),
    '#access' => !empty($user->picture->fid),
    '#description' => t('Check this box to delete your current picture.'),
  );
  $form['picture']['picture_upload'] = array(
    '#type' => 'file',
    '#title' => t('Upload picture'),
    '#size' => 48,
    '#description' => t('Pictures larger than @dimensions pixels will be scaled down.', array('@dimensions' => variable_get('user_picture_dimensions', '85x85'))) . ' ' . filter_xss_admin(variable_get('user_picture_guidelines', '')),
  );
  $form['#validate'][] = 'user_validate_picture';

  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Save'),
    '#weight' => 2,
  );

  $form['#submit'][] = '_smartparticipation_profile_profile_form_submit';

  return $form;
}

function _smartparticipation_profile_profile_form_submit($form, &$form_state)
{
  global $user;
  $edit = array();
  $edit['picture_upload'] = $form_state['values']['picture_upload'];
  $edit['picture_delete'] = $form_state['values']['picture_delete'];
  user_save($user, $edit);
  drupal_set_message(t('Your profile changes have been saved.'));
  drupal_goto('user/'.$user->uid.'/profile');
}

function _smartparticipation_profile_user_profile_title($account)
{
  $title = '';
  if ($account) {
    if (smartparticipation_core_user_viewing_own_profile($account)) {
      $title = t('My Profile');
    } else {
      $title = t('@name\'s Profile', array('@name' => $account->name));
    }
  }
  return $title;
}

/**
 * Implements hook_smartparticipation_user_profile_links_alter().
 */
function smartparticipation_profile_smartparticipation_user_profile_links_alter(&$links, $uid_view, $user) {
  // Get stats weight
  if (ProfileService::userProfilesAreActive()) {
    $first_link_weight = $links[0]['weight'];
    $profile_link = array('link'=>l(t('Profile'), 'user/' . $uid_view . '/profile'), 'weight'=>$first_link_weight);
    array_shift($links);
    array_unshift($links, $profile_link);
  }
}

/**
 * Implements hook_user_login().
 */
function smartparticipation_profile_user_login(&$edit, $account) {

  smartparticipation_profile_show_profile_reminder();

}

/**
 *  Show profile reminder dialog when:
 *  (i)    Feature is turned on in smartparticipation_core config
 *  (ii)   User is a basic user
 *  (iii)  User is not being asked to fill in required account fields by Complete profile module
 *  (iv)   User has an empty profile
 *  (v)    There is an open proposal with an open phase that allows comments
 */
function smartparticipation_profile_show_profile_reminder() {

  $account = user_load($GLOBALS['user']->uid);

  if (
    variable_get('smartparticipation_profile_reminder')
    && smartparticipation_core_is_basic_authenticated_user()
    && !smartparticipation_complete_profile_entity_has_empty_required_fields('user', $account)
    && smartparticipation_core_is_open_discussion()
  ) {

    $profile_service = new ProfileService;
    $profile = $profile_service->find($account->uid);
    $profile_is_empty = $profile_service->isProfileEmpty($profile);

    if ($profile_is_empty) {
      $_SESSION['smartparticipation_profile_reminder'] = TRUE;
    }

  }

}