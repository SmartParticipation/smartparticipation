<?php

/**
 * Implements hook_update_dependencies().
 */
function regroom_update_dependencies() {
  
  /* regroom_update_7135() unsets jqmulti_load_files_always, because they do
   * not necessarily get loaded in the correct order. We are now loading 
   * libraries on a per page basis and controlling load order.
   */
  $dependencies['regroom'][7135] = array(
    'jqmulti' => 7102,
  );
  
  return $dependencies;
}

/**
 * Update site glossary machine_name, name, and description.
 */
function regroom_update_7100() {

  $vocabulary = taxonomy_vocabulary_machine_name_load('regroom_glossary');
  if ($vocabulary) {
    $vocabulary->machine_name = 'regroom_site_glossary';
    $vocabulary->name = 'Site Glossary';
    $vocabulary->description = 'The site glossary.';
    taxonomy_vocabulary_save($vocabulary);
  }
  
}

/**
 * Install and configure the weight module for ordering regroom_faq nodes.
 */

function regroom_update_7101() {
  
  $module_dir = drupal_get_path('module', 'regroom');
  require_once($module_dir . '/node_types/faq.inc');
  
  // Enable the module. Does no harm if module is already enabled.
  module_enable(array('weight'), false);
       
  // Configure weight settings for regroom_faq
  regroom_set_faq_weight_settings();
  

  // Grant weight module permissions
  $roles = array(
    user_role_load_by_name('administrator'),
    user_role_load_by_name('content editor'),
    user_role_load_by_name('site editor'),  
  );
  

  foreach ($roles as $role) {
    user_role_grant_permissions($role->rid, array('assign node weight'));
  }
  
  
  // Set weight of existing FAQ nodes to 0 (the default). Don't override an 
  // existing weight if it somehow already exists.
  $query = 'SELECT nid from {node}
            WHERE type = :type
            AND nid NOT IN 
            (SELECT entity_id from {weight_weights});';
            
  $nids = db_query($query, array(
    ':type' => 'regroom_faq',
    ))
    ->fetchAllAssoc('nid', PDO::FETCH_ASSOC);
   
  foreach (array_keys($nids) as $nid) {
    db_insert('weight_weights')
      ->fields(array(
        'entity_id' => $nid,
        'entity_type' => 'node',
        'weight' => 0,
      ))
      ->execute();
  }

}
 
/**
 * Modify labels on user fields for comment response and site emails.
 */
function regroom_update_7102() {
  
  $instance = field_info_instance('user', 'field_sp_user_comment_emails', 'user');
  $label = t('Notify me when someone responds to my comments.');
  $instance['label'] = $label;
  field_update_instance($instance);
  
  $instance = field_info_instance('user', 'field_sp_user_site_emails', 'user');
  $label = t('Send me updates from this site (for example, when a new discussion opens or a final @proposal_type comes out).',
      array('@proposal_type' => variable_get('regroom_site_proposal_type')));
  $instance['label'] = $label;
  field_update_instance($instance);

}

/**
 * Reimplement topic weights to reference proposal phase rather than proposal.
 * Includes complete re-implementation of node ordering for documents, topics,
 * and subtopics.
 *  
 * NOTE: Any assigned document, subtopic, and topic weights will be lost and 
 * must be recreated manually.
 */
function regroom_update_7103() {
  
  $module_dir = drupal_get_path('module', 'regroom');
  require_once($module_dir . '/schemas/order.schema.inc');  

  db_drop_table('regroom_order');  
  db_drop_table('regroom_order_documents');
  // This should have been db_drop_table('regroom_order_topics')
  // Adding below as regroom_update_7150() and removing this because it is 
  // incorrect.
  // db_drop_table('regroom_topic_node_order');  
  
  $schemas = regroom_order_schema();

  foreach ($schemas as $table_name=>$schema) {
    db_create_table($table_name, $schema);
  }

  db_update('menu_router')
    ->fields(array(
      'include_file' => 'sites/all/modules/custom/regroom/includes/node_order.inc'
    ))  
    ->condition('include_file', 'sites/all/modules/custom/regroom/includes/orderpages.inc')
    ->execute();

  variable_set('menu_rebuild_needed', TRUE);
  
}

/**
 * Add "administer menu" permission to site editor role. Add permission to 
 * revert and delete revisions to site editor and content editor roles. Provide 
 * view access to nodes whose full page display is not publicly available, so 
 * that editors can access revision history. Create revisions of all node types
 * by default when a new version is saved. Install diff module for revision
 * comparison.
 */
function regroom_update_7104() {
  
  $site_editor_role = user_role_load_by_name('site editor');
  if ($site_editor_role) {
    user_role_grant_permissions($site_editor_role->rid, array(
      'administer menu',
      'delete revisions',
      'revert revisions',
      'view regroom_announcement',
      'view regroom_faq',
      'view regroom_news',
      'view regroom_publication',
      'view regroom_research',
      'view regroom_sponsor_partner',
      'view regroom_subtopic',
      'view regroom_team_member',      
    )); 
  }

  $content_editor_role = user_role_load_by_name('content editor');
  if ($content_editor_role) {
    user_role_grant_permissions($content_editor_role->rid, array(
      'delete revisions',
      'revert revisions',
      'view regroom_announcement',
      'view regroom_faq',
      'view regroom_news',
      'view regroom_publication',
      'view regroom_research',
      'view regroom_sponsor_partner',
      'view regroom_subtopic',
      'view regroom_team_member',
    ));  
  } 
  
  // Create revisions by default when editing
  $types = array(
      'page',
      'regroom_about',
      'regroom_announcement',
      'regroom_document',
      'regroom_faq',
      'regroom_learn',
      'regroom_news',
      'regroom_publication',
      'regroom_research',
      'regroom_sponsor_partner',
      'regroom_subtopic',
      'regroom_team_member',
      'regroom_topic', 
  );
  
  foreach ($types as $type) {
    variable_set('node_options_' . $type, array('revision', 'status'));
  }

  // Proposal is unpublished by default, since normally it doesn't go live until
  // long after it's created.
  variable_set('node_options_regroom_proposal', array('revision'));
  
  module_enable(array('diff')); 
  cache_clear_all();
    
}

/**
 * Enable TinyMCE spellchecker.
 */
function regroom_update_7105() {
    
  module_disable(array('wysiwyg'), false);
  regroom_unconfigure_wysiwyg();
  module_enable(array('wysiwyg'), false);
  regroom_configure_wysiwyg();
    
}

/**
 * Enable IMCE and IMCE WYSIWYG modules for image uploading via TinyMCE.
 */
function regroom_update_7106() {

  $site_file_dir = 'sites/default/files/regroom/' . variable_get('regroom_site_machine_name');
  $wysiwyg_dir = $site_file_dir . '/wysiwyg';
  $wysiwyg_image_dir = $wysiwyg_dir . '/images';
  
  /*
  drupal_mkdir($wysiwyg_dir);
  drupal_chmod($wysiwyg_dir, 0777);
  drupal_mkdir($wysiwyg_image_dir);
  drupal_chmod($wysiwyg_image_dir, 0777);
  Haven't tested this, but should work instead of above:
  */
  drupal_mkdir($wysiwyg_dir, 0777);
  drupal_mkdir($wysiwyg_image_dir, 0777);
    
  module_enable(array('imce', 'imce_wysiwyg'), false);
  regroom_unconfigure_wysiwyg();     
  regroom_configure_wysiwyg();
  
}

/**
 * Define a secondary image field and attach an instance to the about node type.
 */
function regroom_update_7107() {
  
  // Add the secondary image field and instance. Since these have already been
  // added to the install, check first to see if they exist.
  $field = field_info_field('field_sp_secondary_image');
  
  if (!$field) {
    
    field_create_field(regroom_secondary_image_field());
    field_create_instance(regroom_about_secondary_image_instance());
    
    // Update the existing About image field label.
    $instance = field_info_instance('node', 'field_image', 'regroom_about');
    $instance['label'] = t('Main image');
    // Save the changed definition.
    field_update_instance($instance);
      
  }

}

/**
 * Modify properties of regroom_news field instances.
 */
function regroom_update_7108() {
  
  $instance = field_info_instance('node', 'field_sp_news_date', 'regroom_news');
  $instance['display']['default']['label'] = 'hidden';
  $instance['display']['default']['settings']['format_type'] = 'medium';    
  field_update_instance($instance);
  
  $instance = field_info_instance('node', 'field_sp_news_source', 'regroom_news');
  $instance['display']['default']['label'] = 'hidden';
  $instance['display']['default']['type'] = 'text_plain';
  $instance['display']['teaser']['label'] = 'hidden';
  $instance['display']['teaser']['type'] = 'text_plain';  
  field_update_instance($instance);
  
  $instance = field_info_instance('node', 'field_sp_url', 'regroom_news');
  $instance['required'] = true;
  field_update_instance($instance);
}

/**
 * Change type of custom comment field field_sp_comment_original from varchar
 * to longtext, to match comment body type.
 */
function regroom_update_7109() {
  
  $field = 'field_sp_comment_original';
 
  $tables = array(
    'field_data_' . $field,
    'field_revision_' . $field,
  );
  
  $column = $field . '_value';
 
  foreach ($tables as $table) {
    /* This generates a SQL syntax error that I can't debug
    db_change_field($table, 
        $column,
        $column,
        array(
          'type' => 'text_long',
        )
    ); 
    */    
    db_query('ALTER TABLE ' . $table . ' MODIFY COLUMN ' . $column . ' longtext');
  }
}

/**
 * Modify properties of field instances of regroom_publication.
 */
function regroom_update_7110() {
  
  // Node type regroom_publication
  $instance = field_info_instance('node', 'field_sp_publication_author', 'regroom_publication');
  $instance['display']['default']['label'] = 'hidden';
  $instance['display']['default']['type'] = 'text_plain';
  $instance['display']['teaser']['label'] = 'hidden';
  $instance['display']['teaser']['type'] = 'text_plain';
  field_update_instance($instance);

  $instance = field_info_instance('node', 'field_sp_publication_data', 'regroom_publication');
  $instance['display']['default']['label'] = 'hidden';
  $instance['display']['default']['type'] = 'text_plain';
  $instance['display']['teaser'] = $instance['display']['default'];
  field_update_instance($instance);
  
  $instance = field_info_instance('node', 'field_sp_publication_date', 'regroom_publication');
  $instance['display']['default']['label'] = 'hidden';
  $instance['display']['default']['type'] = 'text_plain';
  $instance['display']['teaser'] = $instance['display']['default'];
  field_update_instance($instance);

  $instance = field_info_instance('node', 'field_sp_url', 'regroom_publication');
  $instance['display']['default']['label'] = 'hidden';
  $instance['display']['teaser'] = $instance['display']['default'];
  field_update_instance($instance);   
  
  $instance = field_info_instance('node', 'field_sp_publication_year', 'regroom_publication');
  $instance['description'] = t('If publication date should read "forthcoming", "in press", etc., add the estimated future year for correct sorting, then add a descriptive publication date for display.'); 
  $instance['display']['default']['label'] = 'hidden';
  $instance['display']['teaser'] = $instance['display']['default'];
  field_update_instance($instance);  

}

/**
 * Specify node options for regroom_comment_note node type.
 */
function regroom_update_7111() {
    
  variable_set('node_options_regroom_comment_note', array('status'));
  
}


/**
 * Update regroom_team_member node type and field instances. 
 */
function regroom_update_7112() {

  // Update title label.          
  $node_type = node_type_load('regroom_team_member');
  $node_type->title_label = t('Full name');
  node_type_save($node_type);


  // Update properties of field instances.
  $instance = field_info_instance('node', 'field_sp_team_member_title', 'regroom_team_member');
  $instance['display']['default']['label'] = 'hidden';
  $instance['display']['default']['type'] = 'text_plain';
  $instance['display']['teaser']['label'] = 'hidden';
  $instance['display']['teaser']['type'] = 'text_plain';
  field_update_instance($instance);
         
  $instance = field_info_instance('node', 'field_sp_url', 'regroom_team_member');
  $instance['display']['default']['label'] = 'hidden';
  $instance['display']['teaser']['label'] = 'hidden';
  $instance['display']['teaser']['module'] = 'text';
  $instance['display']['teaser']['settings'] = array();
  $instance['display']['teaser']['type'] = 'text_default';
  $instance['display']['teaser']['weight'] = 8;
  field_update_instance($instance);
  
}

/**
 * Restore summary to most node type body fields.
 */
function regroom_update_7113() {

  $types = array(
    'page',
    'regroom_about',
    'regroom_announcement',
    'regroom_document',
    'regroom_faq',
    'regroom_learn',
    'regroom_news',
    'regroom_proposal',
    'regroom_publication',
    'regroom_research',
    'regroom_sponsor_partner',
    'regroom_subtopic',
    'regroom_team_member',
  );
  
  foreach ($types as $type) {
    $instance = field_info_instance('node', 'body', $type);
    $instance['settings']['display_summary'] = true;
    field_update_instance($instance);         
  }
    
}

/**
 * Define intro and node_list_heading fields and instances for regroom_about 
 * nodes.
 */
function regroom_update_7114() {
  
  // Add the intro field and instance. Since these have already been added to 
  // the install, check first to see if they exist.
  $field = field_info_field('field_sp_about_intro');
  
  if (!$field) {   
    field_create_field(regroom_about_intro_field());
    field_create_instance(regroom_about_intro_instance());      
  }

  // Add the node_list_heading field and instance. Since these have already been 
  // added to the install, check first to see if they exist.
  $field = field_info_field('field_sp_about_node_list_heading');
  
  if (!$field) {   
    field_create_field(regroom_about_node_list_heading_field());
    field_create_instance(regroom_about_node_list_heading_instance());      
  }
  
  // Reorder fields on about node add form
  $instance = field_info_instance('node', 'field_image', 'regroom_about');
  $instance['widget']['weight'] = 0;
  field_update_instance($instance); 
  
  $instance = field_info_instance('node', 'field_sp_secondary_image', 'regroom_about');
  $instance['widget']['weight'] = 5;
  field_update_instance($instance); 
  
}

/**
 * Modify pre-loaded proposal_phase taxonomy terms.
 */
function regroom_update_7115() {
  
  $proposal_type = variable_get('regroom_site_proposal_type');
  $final_proposal = 'Final ' . ucfirst($proposal_type);
  
  $vocabulary = taxonomy_vocabulary_machine_name_load('regroom_proposal_phase');
  $tree = taxonomy_get_tree($vocabulary->vid, 0, null, true);
  
  $found_final_proposal_phase = false;
  foreach ($tree as $term) {
    switch ($term->name) {

      case 'Draft Report':
        $term->name = 'Draft Discussion Summary';
        $term->field_sp_phase_text_heading[LANGUAGE_NONE][0]['value'] = 'Draft Summary of Discussion';
        taxonomy_term_save($term);
        field_attach_update('taxonomy_term', $term);
        break;
        
      case 'Final Report':
        $term->name = 'Final Discussion Summary';
        $term->field_sp_phase_text_heading[LANGUAGE_NONE][0]['value'] = 'Final Summary of Discussion';
        taxonomy_term_save($term);
        field_attach_update('taxonomy_term', $term);        
        break;
        
      case $final_proposal:
        $found_final_proposal_phase = true;
        break;
    }
  }
  
  if (! $found_final_proposal_phase) {
    regroom_create_term('regroom_proposal_phase', $final_proposal, 0, '', 0,
      regroom_set_term_field_values(
        array(
          'field_sp_phase_allows_comments' => 0,
          'field_sp_phase_text_heading' => $final_proposal,
        )
      )
    );   
  } 
  
}

/**
 * Make field_sp_team_member_title field optional.
 */
function regroom_update_7116() {
  
  $instance = field_info_instance('node', 'field_sp_team_member_title', 'regroom_team_member');
  $instance['required'] = 0;
  field_update_instance($instance);
         
}

/**
 * Set default Coming Soon heading.
 */
function regroom_update_7117() {
  
  variable_set('regroom_coming_soon_heading', t('Coming Soon'));
   
}

/**
 * Add permission to administer media to editor roles.
 */
function regroom_update_7118() {
  
  $roles = array(
    user_role_load_by_name('content editor'),
    user_role_load_by_name('site editor'),  
  );
  
  foreach ($roles as $role) {
    user_role_grant_permissions($role->rid, array('administer media'));
  }
}


/**
 * Increase size limits on regroom_learn node image instance.
 */
function regroom_update_7119() {

  $instance = field_info_instance('node', 'field_image', 'regroom_learn');
  $instance['settings']['max_filesize'] = '300K';
  field_update_instance($instance);
  
}

/**
 * Rebuild menu to include changes to user profile access: restrict access to 
 * profiles of non-basic authenticated users.
 */
function regroom_update_7120() {
  menu_rebuild();
}

/**
 * Rebuild menu to include changes to RegRoom configuration page access. Grant
 * access to the page to site editors.
 */
function regroom_update_7121() {
  menu_rebuild();
  
  $roles = array(
    user_role_load_by_name('administrator'),
    user_role_load_by_name('site editor'),  
  );
  
  foreach ($roles as $role) {
    user_role_grant_permissions($role->rid, array('administer regroom configuration'));
  }

}

/**
 * Add a shortcut to the RegRoom configuration page to the default shortcut set.
 */
function regroom_update_7122() {
  
  $shortcut_set = shortcut_set_load('shortcut-set-1');
  $found = 0;
  foreach ($shortcut_set->links as $link) {
    if ($link['menu_name'] == 'shortcut-set-1' 
        && $link['link_path'] == 'admin/config/system/regroom') {
      $found = 1;
      break;
    }      
  }
  
  if (!$found) {
    regroom_add_regroom_config_shortcut();
  }
}

/**
 * Grant site editors permission the 'administer menu' permission.
 */
function regroom_update_7123() {
  
  $site_editor_role = user_role_load_by_name('site editor');
  user_role_grant_permissions($site_editor_role->rid, array('administer menu'));

}

/**
 * Update title and description of regroom_topic and regroom_subtopic node 
 * types.
 */
function regroom_update_7124() {
  
  $node_type = node_type_load('regroom_topic');
  $node_type->name = t('Proposal topic');
  $node_type->description = t('A section of the proposal text that displays on a page. Topic content is further divided into subtopics.');
  node_type_save($node_type);
  
  $node_type = node_type_load('regroom_subtopic');
  $node_type->name = t('Proposal subtopic');
  $node_type->description = t('Proposal subtopics are the units of commenting. Subtopics are organized into topics and display on the topic page.');
  node_type_save($node_type);
  
}

/**
 * Fix label on field_sp_user_accepts_terms instance.
 */
function regroom_update_7125() {
  
  $instance = field_info_instance('user', 'field_sp_user_accepts_terms', 'user');
  $instance['label'] = t('I agree to the site <a href="@terms-url" target="_blank">Terms & Conditions of Use</a>.', 
                    array('@terms-url' => url('terms')));
  field_update_instance($instance);

}

/**
 * Fix field_sp_proposal_status instance description.
 */
function regroom_update_7126() {

  $instance = field_info_instance('node', 'field_sp_proposal_status', 'regroom_proposal');
  $instance['description'] = t('Determines whether a proposal displays as open or closed. Topics cannot be added to closed proposals.');
  field_update_instance($instance);
  
}

/**
 * Make field_sp_document_label a required field for regroom_proposal, and
 * tweak description.
 */
function regroom_update_7127() {

  $instance = field_info_instance('node', 'field_sp_document_label', 'regroom_proposal');
  $instance['description'] = t('Label used for proposal documents in links, menus, and other displays. Defaults to the site value.');
  $instance['required'] = 1;
  field_update_instance($instance);
  
}

/**
 * Revoke access to RegRoom Configuration page from site editors.
 */
function regroom_update_7128() {
  
  menu_rebuild();
  $site_editor_role =  user_role_load_by_name('site editor');
  user_role_revoke_permissions($site_editor_role->rid, array('administer regroom configuration')); 
  
}
 
/**
 * Don't allow comment subject on regroom_subtopic comments.
 */
function regroom_update_7129() {
  variable_set('comment_subject_field_regroom_subtopic', 0);
}


/**
 * Grant access regroom_interest_survey nodes to administrator and editor roles.
 */
function regroom_update_7130() {
  
  $roles = array(
    user_role_load_by_name('administrator'),
    user_role_load_by_name('content editor'),
    user_role_load_by_name('site editor'),  
  );
  
  foreach ($roles as $role) {
    user_role_grant_permissions($role->rid, array('view regroom_interest_survey'));
  }
}


/**
 * Rebuild menu to include addition of get comment data Ajax action.
 */
function regroom_update_7131() {
  menu_rebuild();
}

/**
 * Update attributes of field_sp_comment_original field and instance.
 */
function regroom_update_7132() {
  
  // This should have been done in regroom_update_7109().
  db_update('field_config')
    ->fields(array(
      'type' => 'text_long',
    ))
    ->condition('field_name', 'field_sp_comment_original')
    ->execute();

  $instance = field_info_instance('comment', 'field_sp_comment_original', 'comment_node_regroom_subtopic');
  $instance['settings']['text_processing'] = 1;
  $instance['default_value'] = 'filtered_html';
  field_update_instance($instance);
  
  // Update the data stored in the field tables.
  db_update('field_data_field_sp_comment_original')
    ->fields(array(
      'field_sp_comment_original_format' => 'filtered_html',
    ))
    ->execute();
    
  // Update the data stored in the field tables.
  db_update('field_revision_field_sp_comment_original')
    ->fields(array(
      'field_sp_comment_original_format' => 'filtered_html',
    ))
    ->execute();
}

/**
 * Enable and configure honeypot module.
 */
function regroom_update_7133() {
  module_enable(array('honeypot'), false);
  regroom_configure_honeypot();
}

/**
 * Grant access use_hybridauth to anonymous and authenticated user roles and 
 * re-configure display of hybridauth widget on forms.
 */
function regroom_update_7134() {

  regroom_assign_permissions_hybridauth();

  variable_set('hybridauth_forms', array(
    'user_login' => 0,
    'user_login_block' => 0,
    'user_register_form' => 0,
    'comment_form' => 0,
  ));
}

/**
 * Don't load scripts marked in jQuery Multi on all pages.
 */
function regroom_update_7135() {

  variable_set('jqmulti_load_files_always', 0);

}

/**
 * Remove rows from field tables for comment_original, mod_status, and mod_action 
 * on moderator comments; these were incorrectly added when a moderator comment
 * was edited. Modify instance values for these fields.
 */
function regroom_update_7136() {
  
  $instance = field_info_instance('comment', 'field_sp_comment_mod_status', 'comment_node_regroom_subtopic');
  $instance['default_value'] = null;
  $instance['required'] = 0;
  field_update_instance($instance);
  
  // Removing existing rows referencing moderator comments from comment
  // moderation field tables. 
  $sql = "SELECT entity_id FROM field_data_field_sp_comment_type
          WHERE field_sp_comment_type_value = 'moderator'";
          
  $moderator_comment_cids = db_query($sql) ->fetchCol();
  
  if (!empty($moderator_comment_cids)) {
    $moderator_comment_cids = implode(',', $moderator_comment_cids);
    
    $sql = 'DELETE FROM field_data_field_sp_comment_original
            WHERE entity_id IN (' . $moderator_comment_cids . ')';           
    db_query($sql);
    
    $sql = 'DELETE FROM field_revision_field_sp_comment_original
            WHERE entity_id IN (' . $moderator_comment_cids . ')'; 
    db_query($sql);
    
    $sql = 'DELETE FROM field_data_field_sp_comment_mod_status
            WHERE entity_id IN (' . $moderator_comment_cids . ')';           
    db_query($sql);
            
    $sql = 'DELETE FROM field_revision_field_sp_comment_mod_status
            WHERE entity_id IN (' . $moderator_comment_cids . ')';           
    db_query($sql);
    
    $sql = 'DELETE FROM field_data_field_sp_comment_mod_action
            WHERE entity_id IN (' . $moderator_comment_cids . ')';          
    db_query($sql);
            
    $sql = 'DELETE FROM field_revision_field_sp_comment_mod_action
            WHERE entity_id IN (' . $moderator_comment_cids . ')';           
    db_query($sql);
  }

}

/**
 * Correct erroneous default value for comment_original field assigned in 
 * regroom_update_7132(), and delete rows that were thereby erroneously entered 
 * into the field tables.
 */
function regroom_update_7137() {
  
  // Correct the default_value set erroneously in regroom_update_7132(). It's
  // the format column that should have a default value, not the value column.
  $instance = field_info_instance('comment', 'field_sp_comment_original', 'comment_node_regroom_subtopic');
  $instance['default_value'] = null;
  $instance['format'] = 'filtered_html';
  field_update_instance($instance);
  
  $sql = "DELETE FROM field_data_field_sp_comment_original
          WHERE field_sp_comment_original_value = 'f'
          AND field_sp_comment_original_format = 'f'";
  db_query($sql);
  
  $sql = "DELETE FROM field_revision_field_sp_comment_original
          WHERE field_sp_comment_original_value = 'f'
          AND field_sp_comment_original_format = 'f'";
  db_query($sql);
}

/**
 * Load UAParser library with jQuery Multi.
 */
function regroom_update_7138() {
  regroom_configure_jqmulti_libraries();
}

/**
 * Decrease allowed video file size to 100MB.
 */
function regroom_update_7139() {
  
  $instance = field_info_instance('node', 'field_sp_learn_video', 'regroom_learn');
  $instance['settings']['max_filesize'] = '100M';
  field_update_instance($instance);
    
}

/**
 * Grant access to statistics module output to site editors.
 */
function regroom_update_7140() {

  $role = user_role_load_by_name('site editor');
  $rid = $role->rid;
  
  user_role_grant_permissions($rid, array('access statistics'));
  user_role_grant_permissions($rid, array('view post access counter'));
  
}

/**
 * Create regroom_event_log table and configure event logging.
 */
function regroom_update_7141() {
  
  $module_dir = drupal_get_path('module', 'regroom');
  require_once($module_dir . '/schemas/regroom_event_log.schema.inc');
  
  if (!db_table_exists('regroom_event_log')) {
       
    $schemas = regroom_event_log_schema();
    foreach ($schemas as $name => $schema) {
      db_create_table($name, $schema);   
    }
  }
  
  variable_set('regroom_log_events', true);
  
  menu_rebuild();
}

/**
 * Modify a regroom_event_log field.
 */
function regroom_update_7142() {
  
  $table = 'regroom_event_log';
  $field = 'entity_description';
  
  if (db_field_exists($table, $field)) {
    db_change_field($table, $field, 'description', array(
      'type' => 'varchar',
      'length' => 255,
      'not null' => false,
      'description' => t('Optional additional description of event, where an entity is inapplicable or insufficient.'),  
    ));
  }
}

/**
 * Modify the regroom_event_log table.
 */
function regroom_update_7143() {

  $table = 'regroom_event_log';
  
  $field = 'description';
  if (db_field_exists($table, $field)) {
    db_change_field($table, $field, 'detail', array(
      'type' => 'varchar',
      'length' => 255,
      'not null' => false,
      'description' => t('Optional additional details, where an entity is irrelevant or insufficient to fully identify the event.'),  
    ));
  }
  
  $field = 'data';
  if (db_field_exists($table, $field)) {
    db_drop_field('regroom_event_log', 'data');
  }
  
}

/**
 * Add jTruncate to jqmulti configuration.
 */
function regroom_update_7144() {
  regroom_configure_jqmulti_libraries();
}

/**
 * Rebuild menu to register change to /ajax/log_event page callback.
 */
function regroom_update_7145() {
  menu_rebuild();
}

/**
 * Fix user role access to default imce profile.
 */
 function regroom_update_7146() {
   configure_imce_role_access();
 }

/**
 * Enable metatag module and grant access to editor roles.
 */
function regroom_update_7147() {
  
  // Enable the metatag module
  module_enable(array('metatag'));
  
  $site_editor_role = user_role_load_by_name('site editor');
  user_role_grant_permissions($site_editor_role->rid, array(
    'administer meta tags',
    'edit meta tags',
  ));

  $content_editor_role = user_role_load_by_name('content editor');
  user_role_grant_permissions($site_editor_role->rid, array(
    'edit meta tags',
  ));
  
  // Add a shortcut to the metatag configuration page so that editors can
  // access it.
  $shortcut_set = shortcut_set_load('shortcut-set-1');
  $found = 0;
  foreach ($shortcut_set->links as $link) {
    // Also modify title of RegRoom config shortcut
    if ($link['link_path'] == 'admin/config/system/regroom') {
      $link['link_title'] = 'RegRoom site configuration';
      menu_link_save($link);
    } else if ($link['link_path'] == 'admin/config/search/metatags') {
      $found = 1;
    }      
  } 
  if (!$found) {
    regroom_add_metatag_shortcut();
  }

}

/**
 * Corrections to existing user registration and login path data.
 */
function regroom_update_7148() {
  
  /* 1. Transfer existing user registration path data from users.data to 
   * regroom_event_log.path. If the path is a hybridauth destination, transfer
   * it to the event detail instead.
   */

  // Fetch all the users
  $uids = db_query('SELECT uid FROM {users} ORDER BY created')->fetchCol();
  $users = user_load_multiple($uids);
  
  foreach ($users as $user) {

    if ($user->data && array_key_exists('regroom_registration_url', $user->data)) {
      
      $path = $user->data['regroom_registration_url'];
      
      // Record the registration event in the event log unless the account was
      // created by another user
      if (strpos($path, '/admin/people/') === false) {
        $event = array(
          'name' => 'user registration',
          'path' => $user->data['regroom_registration_url'],
          'timestamp' => $user->created,
          'uid' => $user->uid,
        );
        // If a hybridauth registration, store that data in the detail column
        // and leave the path empty.
        if (strpos($event['path'], '/hybridauth') === 0) {
          $path_parts = explode('/', $event['path']);
          $event['detail'] = $path_parts[3];
          unset($event['path']);

        }
        drupal_write_record('regroom_event_log', $event);
      }

      // Remove the data from the users.data field
      unset($user->data['regroom_registration_url']);
      user_save($user);  
    }
  }

  /* 2. Transfer existing hybridauth event log path to event detail field. */
  $query = 'SELECT * FROM {regroom_event_log} l
            WHERE l.path LIKE \'%hybridauth%\'';
            
  $events = db_query($query)
    ->fetchAllAssoc('eid', PDO::FETCH_ASSOC); 

  foreach ($events as $event) {
    $path_parts = explode('/', $event['path']);
    $event['detail'] = $path_parts[3];
    $event['path'] = null;
    drupal_write_record('regroom_event_log', $event, 'eid');
  }
}

/**
 * Add mCustomScrollbar to jqmulti configuration.
 */
function regroom_update_7149() {
  regroom_configure_jqmulti_libraries();
}

/**
 * Drop unused table regroom_order_topics.
 */
function regroom_update_7150() {
  db_drop_table('regroom_order_topics');  
}

/**
 * Add document field to regroom_subtopic node type if it has not been created
 * at module install time.
 */
function regroom_update_7151() {
  
  $field = field_info_field('field_sp_subtopic_doc');
  
  if (!$field) {
    field_create_field(regroom_subtopic_doc_field());
    field_create_instance(regroom_subtopic_doc_instance());
  }
}
 
/**
 * Remove mCustomScrollbar from jqmulti configuration.
 */
function regroom_update_7152() {
  regroom_configure_jqmulti_libraries();
}

/**
 * Add phase closed message field, and instances to topic and subtopic node
 * types.
 */
function regroom_update_7153() {
  
  $field = field_info_field('field_sp_phase_closed_message');
  
  if (!$field) {
    field_create_field(regroom_phase_closed_message_field());
    field_create_instance(regroom_topic_phase_closed_message_instance());
    field_create_instance(regroom_subtopic_phase_closed_message_instance());
    
    // Move the subtopic doc field below the phase closed message field on the
    // subtopic form.
    $instance = field_info_instance('node', 'field_sp_subtopic_doc', 'regroom_subtopic');
    $instance['widget']['weight'] = 10;
    field_update_instance($instance);
  }
 
}

/**
 * Modify descriptions of phase closed message field instances.
 */
function regroom_update_7154() {
  
  $instance = field_info_instance('node', 'field_sp_phase_closed_message', 'regroom_subtopic');
  $instance['description'] = t('Message to display when the subtopic\'s phase is closed. Overrides message specified on the topic.');
  field_update_instance($instance);
  
  $instance = field_info_instance('node', 'field_sp_phase_closed_message', 'regroom_topic');
  $instance['description'] = t('Message to display when the topic\'s phase is closed. Can be overridden by a message specified on the subtopic.');
  field_update_instance($instance);
}


/**
 * Modify weight of regroom_document field_sp_menu_title instance.
 */
function regroom_update_7155() {
  
  $instance = field_info_instance('node', 'field_sp_menu_title', 'regroom_document');
  $instance['widget']['weight'] = -3;
  field_update_instance($instance);
}

/**
 * Enable and configure the Forena Reports module. IMPORTANT: Requires running 
 * update under sudo in order to create the directories and change their 
 * ownership.
 */
function regroom_update_7156() {

  /*if (!module_exists('forena')) {

    module_enable(array('forena'), false);
    regroom_configure_forena();
     
    // Assign roles and permissions
    regroom_create_report_editor_role();
    
    // Allow site editors to view reports
    $role = user_role_load_by_name('site editor');
    user_role_grant_permissions($role->rid, array(
      'assign report editor role',
      'list reports',     
    ));

  }*/
  
}

/**
 * Allow site editors to assign site editor role.
 */
function regroom_update_7157() {
  
  $role = user_role_load_by_name('site editor');
  user_role_grant_permissions($role->rid, array(
    'assign site editor role',   
  ));  
  
}
 
/**
 * Disable bartik theme, which was erroneously left enabled during module 
 * install. Delete blocks associated with bartik and seven themes.
 */
function regroom_update_7158() {
  
  theme_disable(array('bartik'));
  
  db_delete('block')
  ->condition('module', 'regroom')
  ->condition('theme', array('bartik', 'seven'))
  ->execute();
   
}

/**
 * Custom block modifications.
 */
function regroom_update_7159() {
  
  /* 
   * 1. Disable custom regroom blocks from admin theme 
   * The block API doesn't seem to handle these queries: can't get blocks by 
   * theme, for example, and block_load() loads only the first block with the 
   * specified name. It's not clear how to ensure that we get the one(s) for a
   * specific theme.
   */
  db_update('block')
  ->fields(array(
    'status' => 0,
    'visibility' => BLOCK_VISIBILITY_NOTLISTED,
    'region' => -1,
    'pages' => '',
    'cache' => -1,
  ))
  ->condition('module', 'regroom')
  ->condition('theme', 'regroom_admin')
  ->execute();
 

  /* 2. Tweak settings of front page blocks */
  db_update('block')
  ->fields(array(
    'weight' => 60,
  ))
  ->condition('module', 'regroom')
  ->condition('delta', 'closed_proposals')
  ->condition('theme', 'regroom_admin', '!=')
  ->execute();   
  
  db_update('block')
  ->fields(array(
    'weight' => 30,
  ))
  ->condition('module', 'regroom')
  ->condition('delta', 'coming_soon')
  ->condition('theme', 'regroom_admin', '!=')
  ->execute();
  
  db_update('block')
  ->fields(array(
    'cache' => DRUPAL_CACHE_PER_PAGE,
    'weight' => 10,
  ))
  ->condition('module', 'regroom')
  ->condition('delta', 'learn_panel')
  ->condition('theme', 'regroom_admin', '!=')
  ->execute();
  
  db_update('block')
  ->fields(array(
    'weight' => 20,
  ))
  ->condition('module', 'regroom')
  ->condition('delta', 'open_proposals')
  ->condition('theme', 'regroom_admin', '!=')
  ->execute();
 
  db_update('block')
  ->fields(array(
    'cache' => DRUPAL_CACHE_PER_PAGE,
    'weight' => 40,
  ))
  ->condition('module', 'regroom')
  ->condition('delta', 'recent_comments')
  ->condition('theme', 'regroom_admin', '!=')
  ->execute();
  
  db_update('block')
  ->fields(array(
    'cache' => DRUPAL_CACHE_PER_PAGE,
    'weight' => 50,
  ))
  ->condition('module', 'regroom')
  ->condition('delta', 'recommended_comments')
  ->condition('theme', 'regroom_admin', '!=')
  ->execute();
 
  
  /* 
   * 3. Delete defunct blocks from database (these were created during a very
   * early version of the module and never got cleaned up.)
   */
   db_delete('block')
   ->condition('module', 'regroom')
   ->condition('delta', array('media', 'members', 'my_comments', 'my_endorsements', 'sponsors_partners'))
   ->execute();
   
}
 
/**
 * Remove automatic loading of recent and recommended comment blocks on front
 * page.
 */ 
function regroom_update_7160() {
  
  db_update('block')
  ->fields(array(
    'pages' => '',
  ))
  ->condition('module', 'regroom')
  ->condition('delta', array('recent_comments', 'recommended_comments'))
  ->condition('theme', 'regroom_admin', '!=')
  ->execute();
  
}

/**
 * Add closed proposal summary field and instance and url instance for proposal
 * archive url. Adjust weights of proposal instances.
 */
function regroom_update_7161() {
  
  $field = field_info_field('field_sp_proposal_summary_closed');
  
  if (!$field) {
    
    field_create_field(regroom_closed_proposal_summary_field());
    field_create_instance(regroom_closed_proposal_summary_instance());
    
    // Modify existing instance weights
    $instance = field_info_instance('node', 'field_sp_proposal_status', 'regroom_proposal');
    $instance['widget']['weight'] = 5;
    field_update_instance($instance);

    $instance = field_info_instance('node', 'field_sp_proposal_phase', 'regroom_proposal');
    $instance['widget']['weight'] = 10;
    field_update_instance($instance);
      
    $instance = field_info_instance('node', 'field_image', 'regroom_proposal');
    $instance['widget']['weight'] = 15;
    field_update_instance($instance);

    $instance = field_info_instance('node', 'body', 'regroom_proposal');
    $instance['widget']['weight'] = 20;
    field_update_instance($instance);
    
    $instance = field_info_instance('node', 'field_sp_proposal_image_closed', 'regroom_proposal');
    $instance['widget']['weight'] = 23;
    field_update_instance($instance);
       
  }

  $instance = field_info_instance('node', 'field_sp_url', 'regroom_proposal');
  if (!$instance) {
    field_create_instance(regroom_proposal_url_instance());
  }
}

/**
 * Change name of demo theme to regroom_default, now considered a default theme 
 * for the regroom module (not just sites running under the RegRoom umbrella).
 */
function regroom_update_7162() {

  $default_theme = variable_get('theme_default');
  if ($default_theme == 'smartparticipation') {
    variable_set('theme_default', 'regroom_default');
    theme_enable(array('regroom_default'));
  }

}

/**
 * Load regroom minified libraries script with jQuery Multi.
 */
function regroom_update_7163() {
  regroom_configure_jqmulti_libraries();
}

/**
 * Create small square thumbnail image style.
 */
function regroom_update_7164() {
  regroom_create_custom_image_styles();
}

/**
 * Change the user menu link path from /stats to /profile
 */
function regroom_update_7165() {
  $mlid = db_select('menu_links' , 'ml')
    ->condition('ml.plid' , 0)
    ->condition('ml.menu_name', 'sp-user-menu-logged-in')
    ->condition('ml.link_title', '[current-user:name]')
    ->fields('ml', array('mlid'))
    ->execute()
    ->fetchCol();
  if (!empty($mlid)) {
    $mlid = $mlid[0];
    $menu_link = array(
      'mlid' => $mlid,
      'menu_name' => 'sp-user-menu-logged-in',
      'link_path' => 'user',
      'router_path' => 'user',
      'link_title' => '[current-user:name]',
      'options' => array(
        'attributes' => array(
          'title' => '',
        ),
        'menu_token_link_path' => 'users/[current-user:name]/profile',
        'menu_token_data' => array(),
        'menu_token_options' => array(
          'clear' => 0,
        ),
        'alter' => TRUE,
      ),
      'module' => 'menu',
      'hidden' => '0',
      'external' => '0',
      'has_children' => '1',
      'expanded' => '0',
      'weight' => '20',
    );
    menu_link_save($menu_link);
    menu_rebuild();
  }
}

/**
 * Fix for user menu link path where username contains a dot(.)
 */
function regroom_update_7166() {
  $mlid = db_select('menu_links' , 'ml')
    ->condition('ml.plid' , 0)
    ->condition('ml.menu_name', 'sp-user-menu-logged-in')
    ->condition('ml.link_title', '[current-user:name]')
    ->fields('ml', array('mlid'))
    ->execute()
    ->fetchCol();
  if (!empty($mlid)) {
    $mlid = $mlid[0];
    $menu_link = array(
      'mlid' => $mlid,
      'menu_name' => 'sp-user-menu-logged-in',
      'link_path' => 'user',
      'router_path' => 'user',
      'link_title' => '[current-user:name]',
      'options' => array(
        'attributes' => array(
          'title' => '',
        ),
        'menu_token_link_path' => 'user/[current-user:uid]/profile',
        'menu_token_data' => array(),
        'menu_token_options' => array(
          'clear' => 0,
        ),
        'alter' => TRUE,
      ),
      'module' => 'menu',
      'hidden' => '0',
      'external' => '0',
      'has_children' => '1',
      'expanded' => '0',
      'weight' => '20',
    );
    menu_link_save($menu_link);
    menu_rebuild();
  }
}

/**
 * Create schema for A/B tests.
 */
function regroom_update_7167()
{
  include_once drupal_get_path('module', 'regroom') . '/schemas/ab_test.schema.inc';
  $schema = regroom_ab_test_schema();
  db_create_table('regroom_ab_test',$schema['regroom_ab_test']);
  db_create_table('regroom_ab_test_user_variant',$schema['regroom_ab_test_user_variant']);
}

/**
 * Create comment tips node type (if needed).
 */
function regroom_update_7168()
{
  $node_type = node_type_load('regroom_comment_tips');
  if (empty($node_type)) {
    regroom_create_comment_tips_node_type();
  }
}

/**
 * Create the comment tips phase field (if needed).
 */
function regroom_update_7169()
{
  $field = field_info_field('field_sp_comment_tips_phase');

  if (!$field) {
    $fields = regroom_comment_tips_installed_fields();
    $fields['field_sp_comment_tips_phase']['entity_types'] = array('node');
    $instances = regroom_comment_tips_installed_instances();
    $instances['field_sp_comment_tips_phase']['entity_type'] = 'node';
    $instances['field_sp_comment_tips_phase']['bundle'] = 'regroom_comment_tips';
    field_create_field($fields['field_sp_comment_tips_phase']);
    field_create_instance($instances['field_sp_comment_tips_phase']);
  }
}

/**
 * Add 'detail_long' field to 'regroom_event_log' table (if needed).
 */
function regroom_update_7170()
{
  include_once drupal_get_path('module', 'regroom') . '/schemas/regroom_event_log.schema.inc';
  //$current_schema = drupal_get_schema('regroom_event_log');
  if (!db_field_exists('regroom_event_log','detail_long')) {
    $schema = regroom_event_log_schema();
    db_add_field('regroom_event_log','detail_long',$schema['regroom_event_log']['fields']['detail_long']);
  }
}

/**
 * Add 'instance_start' field to 'regroom_event_log' table (if needed).
 */
function regroom_update_7171()
{
  include_once drupal_get_path('module', 'regroom') . '/schemas/regroom_event_log.schema.inc';
  if (!db_field_exists('regroom_event_log','instance_start')) {
    $schema = regroom_event_log_schema();
    db_add_field('regroom_event_log','instance_start',$schema['regroom_event_log']['fields']['instance_start']);
    db_add_index('regroom_event_log','instance_start',$schema['regroom_event_log']['indexes']['instance_start']);
  }
}

/**
 * Add 'sid' field to 'regroom_event_log' table (if needed).
 */
function regroom_update_7172()
{
  include_once drupal_get_path('module', 'regroom') . '/schemas/regroom_event_log.schema.inc';
  if (!db_field_exists('regroom_event_log','sid')) {
    $schema = regroom_event_log_schema();
    db_add_field('regroom_event_log','sid',$schema['regroom_event_log']['fields']['sid']);
  }
}

/**
 * Add Comments filter format.
 */
function regroom_update_7173()
{
  module_enable(array('smartparticipation_comments_filter_format'));
}

/**
 * Enable Webform Validation module.
 */
function regroom_update_7174()
{
  module_enable(array('webform_validation'));
}

/**
 * Create menu items for new stats pages
 */
function regroom_update_7175()
{

  // Create Proposals In menu item
  // Check to see if it already exists
  $mlid = db_select('menu_links' , 'ml')
      ->condition('ml.link_path', 'menutoken/5686796ade321')
      ->fields('ml', array('mlid'))
      ->execute()
      ->fetchCol();

  // If not create it
  if (empty($mlid)) {
    $mlids = db_select('menu_links' , 'ml')
        ->condition('ml.plid' , 0)
      ->condition('ml.menu_name', 'sp-user-menu-logged-in')
        ->condition('ml.link_title', '[current-user:name]')
        ->fields('ml', array('mlid'))
        ->execute()
        ->fetchCol();
    if (!empty($mlids)) {
      $mlid = $mlids[0];
      $menu_link = array(
          'plid' => $mlid,
        'menu_name' => 'sp-user-menu-logged-in',
          'link_path' => 'menutoken/5686796ade321',
          'router_path' => 'menutoken/%',
          'link_title' => 'Proposals I participated in',
          'options' => array(
              'attributes' => array(
                  'title' => '',
              ),
              'menu_token_link_path' => 'user/[current-user:uid]/proposals',
              'menu_token_data' => array(),
              'menu_token_options' => array(
                  'clear' => 0,
              ),
              'alter' => TRUE,
          ),
          'module' => 'menu',
          'hidden' => '0',
          'external' => '0',
          'has_children' => '0',
          'expanded' => '0',
          'weight' => '37',
          'parent_path' => 'user',
      );
      menu_link_save($menu_link);
    }
  }

  // Create Endorsed Comments menu item
  // Check to see if it already exists
  $mlid = db_select('menu_links' , 'ml')
      ->condition('ml.link_path', 'menutoken/56867fe0c406f')
      ->fields('ml', array('mlid'))
      ->execute()
      ->fetchCol();

  // If not create it
  if (empty($mlid)) {
    $mlids = db_select('menu_links' , 'ml')
        ->condition('ml.plid' , 0)
      ->condition('ml.menu_name', 'sp-user-menu-logged-in')
        ->condition('ml.link_title', '[current-user:name]')
        ->fields('ml', array('mlid'))
        ->execute()
        ->fetchCol();
    if (!empty($mlids)) {
      $mlid = $mlids[0];
      $menu_link = array(
          'plid' => $mlid,
        'menu_name' => 'sp-user-menu-logged-in',
          'link_path' => 'menutoken/56867fe0c406f',
          'router_path' => 'menutoken/%',
          'link_title' => 'My Endorsed Comments',
          'options' => array(
              'attributes' => array(
                  'title' => '',
              ),
              'menu_token_link_path' => 'user/[current-user:uid]/endorsed',
              'menu_token_data' => array(),
              'menu_token_options' => array(
                  'clear' => 0,
              ),
              'alter' => TRUE,
          ),
          'module' => 'menu',
          'hidden' => '0',
          'external' => '0',
          'has_children' => '0',
          'expanded' => '0',
          'weight' => '42',
          'parent_path' => 'user',
      );
      menu_link_save($menu_link);
    }
  }

  // Create Recommended Comments menu item
  // Check to see if it already exists
  $mlid = db_select('menu_links' , 'ml')
      ->condition('ml.link_path', 'menutoken/568681abcff2e')
      ->fields('ml', array('mlid'))
      ->execute()
      ->fetchCol();

  // If not create it
  if (empty($mlid)) {
    $mlids = db_select('menu_links' , 'ml')
        ->condition('ml.plid' , 0)
      ->condition('ml.menu_name', 'sp-user-menu-logged-in')
        ->condition('ml.link_title', '[current-user:name]')
        ->fields('ml', array('mlid'))
        ->execute()
        ->fetchCol();
    if (!empty($mlids)) {
      $mlid = $mlids[0];
      $menu_link = array(
          'plid' => $mlid,
        'menu_name' => 'sp-user-menu-logged-in',
          'link_path' => 'menutoken/568681abcff2e',
          'router_path' => 'menutoken/%',
          'link_title' => 'My Recommended Comments',
          'options' => array(
              'attributes' => array(
                  'title' => '',
              ),
              'menu_token_link_path' => 'user/[current-user:uid]/recommended',
              'menu_token_data' => array(),
              'menu_token_options' => array(
                  'clear' => 0,
              ),
              'alter' => TRUE,
          ),
          'module' => 'menu',
          'hidden' => '0',
          'external' => '0',
          'has_children' => '0',
          'expanded' => '0',
          'weight' => '43',
          'parent_path' => 'user',
      );
      menu_link_save($menu_link);
    }
  }

  menu_rebuild();

}

/**
 * No longer needed.  Unnecessary fix put in place.
 */
function regroom_update_7176() { }

/**
 * Set the default values for the footer elements which are
 * editable in the Site Configuration
 */
function regroom_update_7177() {

  $base_theme_path = drupal_get_path('theme', 'regroom_base');
  $image_path = '/' . $base_theme_path . '/images/';

  $col1 = '<a target="_blank" href="http://www.cornell.edu/"
             title="Cornell University">
            <img src="' . $image_path . 'cornell-logo-v2.png"/>
          </a>';


  $col2 = '<p><a target="_blank" href="http://www.lawschool.cornell.edu/ceri/" title="Cornell eRulemaking Initiative">CeRI (Cornell eRulemaking Initiative)</a><br />
          CeRI is a multidisciplinary group of Cornell University researchers discovering how the design and process of online engagement can support public discussion that  is informed, inclusive and insightful.</p>

        <p class="copyright">&copy;' . date('Y') . ' Cornell
University</p>';

  $format = 'full_html';

  $footer_col1 = array('value' => $col1, 'format' => $format);
  variable_set('regroom_footer_column_1', $footer_col1);

  $footer_col2 = array('value' => $col2, 'format' => $format);
  variable_set('regroom_footer_column_2', $footer_col2);

  variable_set('regroom_footer_facebook_url', 'https://www.facebook.com/smartparticipation');

  variable_set('regroom_footer_twitter_url', 'https://twitter.com/smartparticip8n');

}

/**
 * Set default proposal summary truncate value.
 */
function regroom_update_7178() {
  variable_set('regroom_data_truncate_limit', 255);
}

/**
 * Enable the Better Statistics module and activate
 * user_agent field in the accesslog table
 * for Access log data export.
 */
function regroom_update_7179() {
  module_enable(array('better_statistics'), false);
  regroom_configure_better_statistics();
}

/**
 * Enable the custom smartparticipation_ajax_throbber module.
 */
function regroom_update_7180() {
  module_enable(array('smartparticipation_ajax_throbber'));
}

/**
 * Create proposal phase open text and phase closed text fields (if needed).
 */
function regroom_update_7181() {
  $field_names = array ('field_sp_phase_open_text','field_sp_phase_closed_text');

  foreach($field_names as $field_name) {
    $field = field_info_field($field_name);

    if (!$field) {
      $fields = regroom_proposal_phase_installed_fields();
      $instances = regroom_proposal_phase_installed_instances();
      field_create_field($fields[$field_name]);
      field_create_instance($instances[$field_name]);
    }

  }
}

/**
 * Create publication Featured Publication field (if needed).
 */
function regroom_update_7182() {

    $field = field_info_field('field_sp_publication_featured');

    if (!$field) {
      $fields = regroom_publication_installed_fields();
      $instances = regroom_publication_installed_instances();
      $instances['field_sp_publication_featured']['bundle'] = 'regroom_publication';
      field_create_field($fields['field_sp_publication_featured']);
      field_create_instance($instances['field_sp_publication_featured']);
    }

}

/**
 * Set default comment truncate value and featured comment truncate value.
 */
function regroom_update_7183() {
  variable_set('regroom_comment_truncate_limit', 800);
  variable_set('regroom_featured_comment_truncate_limit', 500);
}

/**
 * Enable the simplehtmldom module
 */
function regroom_update_7184() {
  module_enable(array('simplehtmldom'));
}

/**
 * Create proposal phase display text and subtopic heading fields (if needed).
 */
function regroom_update_7185() {
  $field_names = array ('field_sp_phase_display_text','field_sp_phase_subtopic_heading');

  foreach($field_names as $field_name) {
    $field = field_info_field($field_name);

    if (!$field) {
      $fields = regroom_proposal_phase_installed_fields();
      $instances = regroom_proposal_phase_installed_instances();
      field_create_field($fields[$field_name]);
      field_create_instance($instances[$field_name]);
    }

  }
}

/**
 * Change default editor to CKEditor if it isn't already set
 */
function regroom_update_7186() {
  regroom_configure_wysiwyg();
}

/**
 * Create display in learn page field (if needed).
 */
function regroom_update_7187() {
  $field_name = 'field_sp_display_in_learn_panel';

  $field = field_info_field($field_name);

  if (!$field) {
    $fields = regroom_learn_installed_fields();
    $instances = regroom_learn_installed_instances();
    field_create_field($fields[$field_name]);
    field_create_instance($instances[$field_name]);
  }
}

/**
 * Turn on "HTML block format" in the CKEditor profile for Full HTML.
 */
function regroom_update_7188() {
  regroom_configure_wysiwyg();
}

/**
 * Set the default values for the contact us elements which are
 * editable in the Site Configuration
 */
function regroom_update_7189() {

  $organization =
    '<h2><a href="http://www.lawschool.cornell.edu/ceri/" title="Cornell eRulemaking Initiative">CeRI</a>
    (Cornell eRulemaking Initiative)</h2><h3><a href="http://www.lawschool.cornell.edu/" title="Cornell Law School website">
    Cornell Law School</a></h3>';

  $alternative =
      '<p>We&rsquo;re always happy to hear from you, but if you have a problem using the site or a question about
        what&rsquo;s going on here, you might find the answer in the&nbsp;<a href="http://regroom.local/faq">FAQs</a>.</p>';

  $format = 'full_html';

  $contact_organization = array('value' => $organization, 'format' => $format);
  variable_set('regroom_contact_organization', $contact_organization);

  $contact_alternative = array('value' => $alternative, 'format' => $format);
  variable_set('regroom_contact_alternative', $contact_alternative);

  variable_set('regroom_contact_address', 'Myron Taylor Hall<br />Ithaca, NY 14853');

  variable_set('regroom_contact_phone', '607-255-8783');

}

/**
 * Create Lead sentence field for comment tips (if needed).
 */
function regroom_update_7190() {
  $field_name = 'field_sp_comment_tips_sentence';

  $field = field_info_field($field_name);

  if (!$field) {
    $fields = regroom_comment_tips_installed_fields();
    $instances = regroom_comment_tips_installed_instances();
    field_create_field($fields[$field_name]);
    field_create_instance($instances[$field_name]);
  }
}

/**
 * Set default comment length limit value.
 */
function regroom_update_7191() {
  variable_set('regroom_comment_length_limit', 10000);
}

/**
 * Enable XML Sitemap modules.
 */
function regroom_update_7192() {
  module_enable(array('xmlsitemap_engines', 'xmlsitemap_node', 'xmlsitemap_custom'), false);
}

/**
 * Enable Proposal Comment Admin module.
 */
function regroom_update_7193() {
  module_enable(array('smartparticipation_proposal_comment_admin'), false);
}

/**
 * Update 'Contact Us' link in footer menu.
 */
function regroom_update_7194() {

  // Delete the Contact Us page node.
  $query = new EntityFieldQuery();
  $result = $query->entityCondition('entity_type', 'node')
    ->propertyCondition('type', 'page')
    ->propertyCondition('title', 'Contact Us')
    ->range(0,1)
    ->execute();
  if (!empty($result['node'])) {
    $nid = current($result['node'])->nid;
    node_delete($nid);
  }

  // Delete the existing Contact Us footer menu link.
  $mlids = db_select('menu_links' , 'ml')
    ->condition('ml.link_path', 'contact')
    ->fields('ml', array('mlid'))
    ->execute()
    ->fetchCol();
  foreach ($mlids as $mlid) {
    db_delete('menu_links')->condition('mlid', $mlid)->execute();
  }
  menu_rebuild();

  // Re-create the Contact Us footer menu link so it correctly points
  // to the new contact page.
  $link = array(
    'menu_name' => 'regroom-footer-menu',
    'link_path' => 'contact',
    'router_path' => 'contact',
    'link_title' => 'Contact Us',
    'options' => array(
      'attributes' => array(
        'title' => '',
      ),
    ),
    'module' => 'menu',
    'hidden' => '0',
    'external' => '0',
    'has_children' => '0',
    'expanded' => '0',
    'weight' => '6',
  );
  menu_link_save($link);
  menu_rebuild();

}